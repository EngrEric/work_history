Data Types
Data types are the building blocks of all languages and essential pieces of any program.
Below are examples of four primitive data types that lay the foundation for all JavaScript programs. 
Primitive data types, as their name implies, are the simplest built-in forms of data.

console.log('New York City');
console.log(40.7);
console.log(true);
console.log(null);

In the example above, the computer logs each of the four primitive data types to the console.
 The types include:
Strings — Any grouping of keyboard characters (letters, spaces, numbers, or symbols) surrounded by 
single quotes ('Hello') or double quotes ("World!"). In the example above, 'New York City' is a string.

Numbers — Any number, including numbers with decimals: 4, 1516, .002, 23.42. In the example above, 40.7 is a number.

Booleans — Either true or false, with no quotations. In the example above, true is a boolean.

Null — Can only be null. It represents the absence of value.




Properties
When you introduce a new piece of data into a JavaScript program, the browser saves it as an instance of the data type.
An instance is an individual case (or object) of a data type.
JavaScript will save a new piece of data, like 'Hello', as a string instance in the computer's memory.
 Another example, the number 40.7, is stored as an instance of the number data type. 
An instance, like the string 'Hello', has additional information attached to it.
For example, every string instance has a property called length that stores the number of characters in it. 
You can retrieve property information by appending the string with a period and the property name:

console.log('Hello'.length);



Built-in Methods
While the length of a string is calculated when an instance is created, a string instance also has methods
that calculate new information as needed. When these built-in methods are called on an instance, they perform actions that generate an output.
Built-in methods are called, or used, by appending an instance with a period, the name of the method, and opening (() and closing ()) parentheses.
Consider the examples below:
console.log('Hello'.toUpperCase()); // 'HELLO'
console.log('Hey'.startsWith('H')); // true
Let's look at each line separately:
On the first line, the .toUpperCase() method is called on the string instance 'Hello'. The result is logged to the console.
This method returns a string in all capital letters: 'HELLO'.
On the second line, the .startsWith() method is called on the string instance "Hey". This method also accepts the character 'H' as 
an input between the opening and closing parentheses. Since the string 'Hey' does start with the letter 'H', the method returns the boolean true. 





Libraries
Instance methods, by definition, require that you create an instance before you can use them. 
What if you want to call a method without an instance? That's where JavaScript libraries come in. 
Libraries contain methods that you can call without creating an instance.
One such collection contains mathematical methods, aptly named the Math library. 
Let's see how you call the .random() method from the Math library:
console.log(Math.random()); // random number between 0 and 1
In the example above, we called the .random() method by appending the library name with a period, 
the name of the method, and opening (() and closing ()) parentheses. This method returns a random number between 0 and 1. 
This code prints a random number between 0 and 1. 
To generate a random number between 0 and 50, we could multiply this result by 50, like so: 
Math.random() * 50;
The answer in the example above will most likely be a decimal. To ensure the answer is a whole number, 
JavaScript provides a built-in method called Math.floor(). Math.floor() takes a decimal number, and rounds down to the nearest whole number. 
You can use Math.floor() to round a random number like this:
Math.floor(Math.random() * 50);
In this case:
Math.random generates a random number between 0 and 1.
We then multiply that number by 50, so now we have a number between 0 and 50.
Then, Math.floor rounds the number down to the nearest whole number.

link to string library =  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype

link to Math library = https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math


link to Math library = https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number



Review Types and Operators
Let's take one more glance at the concepts we just learned:
Four essential data types in JavaScript include strings, numbers, booleans, and null.
Data is printed, or logged, to the console with console.log().
Four built-in mathematical operators include +, -, *, and /.
JavaScript associates certain properties with different data types.
JavaScript has built-in methods for different data types.
Libraries are collections of methods that can be called without an instance.
You can write single-line comments with // and multi-line comments between /* and */.


Variables
myName is the variable's name. Notice that the word has no spaces, and we capitalized
 the N. Capitalizing in this way is a standard convention in JavaScript called camelCasing,
 because the capital letters look like the humps on a camel's back.






String Interpolation II
In the newest version of JavaScript (ES6) we can insert variables into strings with ease, by doing two things:
Instead of using quotes around the string, use backticks (this key is usually located on the top of your keyboard, left of the 1 key).
Wrap your variable with ${myVariable}, followed by a sentence. No +s necessary.
ES6 string interpolation is easier than the method you used last exercise. With ES6 interpolation we can insert variables directly into our text.
It looks like this:
let myPet = 'armadillo'
console.log(`I own a pet ${myPet}.`)
// Output: 'I own a pet armadillo.'
In the example above, the backticks (`) wrap the entire string. The variable (myPet) is inserted using ${}. The resulting string is:
I own a pet armadillo.
