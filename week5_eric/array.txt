length property
We may wish to know how many items are stored inside of an array. 
We can find this out by using one of an array's built-in properties, called length. 
We can attach this to any variable holding an array and it will return the number of items inside.
let newYearsResolutions = ['Rappel into a cave', 'Take a falconry class'];

console.log(newYearsResolutions.length);
// Output: 2
In the example above, we log newYearsResolutions.length to the console. 
This code retrieves the length property of the newYearsResolutions array and logs it to the console. 
This array has two items, so 2 would be logged to the console. 




push Method
JavaScript has built in methods for arrays that help us do common tasks. Let's learn some of them.
First, .push() allows us to add items to the end of an array. Here is an example of how this is used:
let newYearsResolutions = ['item 0', 'item 1', 'item 2'];

newYearsResolutions.push('item 3', 'item 4');
The method .push() would make the newYearsResolutions array look like: 
['item 0', 'item 1', 'item 2', 'item 3', 'item 4'];
How does .push() work? 
It connects to newYearsResolutions with a period. 
Then we call it like a function. That's because .push() is a function and one that JavaScript allows us 
to use right on an array. 
Another array method, .pop(), is similar to .push(). This method removes the last item of an array. 
let newYearsResolutions = ['item 0', 'item 1', 'item 2'];

newYearsResolutions.pop();

console.log(newYearsResolutions); 
// Output: [ 'item 0', 'item 1' ]
In the example above, calling .pop() on the newYearsResolutions array removed item 2 from the end. 

In the example above, calling .shift() on the newYearsResolutions array removed item from the begining.

In the example above, calling .unshift() on the newYearsResolutions array add item  from the begining.





More Array Methods
There are many more array methods than just .push() and .pop(). You can read about all of the array methods that
 exist on the Mozilla Developer Network (MDN) documentation (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). 
.pop() and .push() modify the array on which they're called. However, there are some array methods that don't
 modify the array. Be sure to check MDN to understand the behavior of the method you are using. 
Some methods that JavaScript developers use frequently are .join(), .slice(), .splice(), .shift(), .unshift(),
 and .concat() amongst many others. 
Below, we will explore some methods that we have not learned yet. We will use these methods to edit a grocery list. 
As you complete the steps, you can consult the MDN documentation to learn what each method does! 





Review Arrays
Nice work! In this lesson, we learned these concepts regarding arrays:
Arrays are lists and are a way to store data in JavaScript. 
Arrays are created with brackets [].
Each item inside of an array is at a numbered position, starting at 0. 
We can access one item in an array using its numbered position, with syntax like: myArray[0].
We can also change an item in an array using its numbered position, with syntax like myArray[0] = "new string"; 
Arrays have a length property, which allows you to see how many items are in an array.
Arrays have their own methods, including .push() and .pop(), which add and remove items from an array, respectively.
Arrays have many other methods that perform different functions, such as .slice() and .shift(). 
You can read the documentation for any array method on the Mozilla Developer Network website. 
Variables that contain arrays can be declared with let or const. Even when declared with const, 
arrays are still mutable; they can be changed. However, a variable declared with const cannot be reassigned. 